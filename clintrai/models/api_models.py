# generated by datamodel-codegen:
#   filename:  ctg-oas-v2.yaml
#   timestamp: 2025-07-28T06:49:02+00:00

from __future__ import annotations

from datetime import date as date_aliased
from enum import Enum
from typing import Annotated, Any

from pydantic import BaseModel, ConfigDict, Field, RootModel
from pydantic.alias_generators import to_camel


class WebLink(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    label: str
    url: str


class SearchPart(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    isEnum: bool
    isSynonyms: bool
    pieces: list[str]
    type: str
    weight: float


class EnumItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exceptions: dict[str, Any] | None = None
    legacyValue: str
    value: str


class StudySize(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str
    sizeBytes: int


class DistItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sizeRange: str
    studiesCount: int


class ListSize(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    size: int
    studiesCount: int


class ValueCount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    studiesCount: int
    value: str


class FieldStatsType(Enum):
    ENUM = 'ENUM'
    STRING = 'STRING'
    DATE = 'DATE'
    INTEGER = 'INTEGER'
    NUMBER = 'NUMBER'
    BOOLEAN = 'BOOLEAN'


class LongestString(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    length: int
    nctId: str
    value: str


class DateStats(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field: str
    formats: list[str]
    max: str | None = None
    min: str | None = None
    missingStudiesCount: int
    piece: str
    type: FieldStatsType


class IntegerStats(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avg: float | None = None
    field: str
    max: int | None = None
    min: int | None = None
    missingStudiesCount: int
    piece: str
    type: FieldStatsType


class NumberStats(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avg: float | None = None
    field: str
    max: float | None = None
    min: float | None = None
    missingStudiesCount: int
    piece: str
    type: FieldStatsType


class BooleanStats(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    falseCount: int
    field: str
    missingStudiesCount: int
    piece: str
    trueCount: int
    type: FieldStatsType


class Version(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apiVersion: str
    dataTimestamp: str | None = None


class OversightModule(BaseModel):
    oversightHasDmc: bool | None = None
    isFdaRegulatedDrug: bool | None = None
    isFdaRegulatedDevice: bool | None = None
    isUnapprovedDevice: bool | None = None
    isPpsd: bool | None = None
    isUsExport: bool | None = None
    fdaaa801Violation: bool | None = None


class DescriptionModule(BaseModel):
    briefSummary: str | None = None
    detailedDescription: str | None = None


class ConditionsModule(BaseModel):
    conditions: list[str] | None = None
    keywords: list[str] | None = None


class ModelPredictions(BaseModel):
    pass


class BmiLimits(BaseModel):
    pass


class SeeAlsoLink(BaseModel):
    label: str | None = None
    url: str | None = None


class ExpandedAccessTypes(BaseModel):
    individual: bool | None = None
    intermediate: bool | None = None
    treatment: bool | None = None


class AvailIpd(BaseModel):
    id: str | None = None
    type: str | None = None
    url: str | None = None
    comment: str | None = None


class LimitationsAndCaveats(BaseModel):
    description: str | None = None


class SubmissionInfo(BaseModel):
    releaseDate: date_aliased | None = None
    unreleaseDate: date_aliased | None = None
    unreleaseDateUnknown: bool | None = None
    resetDate: date_aliased | None = None
    mcpReleaseN: int | None = None


class PointOfContact(BaseModel):
    title: str | None = None
    organization: str | None = None
    email: str | None = None
    phone: str | None = None
    phoneExt: str | None = None


class Outcome(BaseModel):
    measure: str | None = None
    description: str | None = None
    timeFrame: str | None = None


class EventGroup(BaseModel):
    id: str | None = None
    title: str | None = None
    description: str | None = None
    deathsNumAffected: int | None = None
    deathsNumAtRisk: int | None = None
    seriousNumAffected: int | None = None
    seriousNumAtRisk: int | None = None
    otherNumAffected: int | None = None
    otherNumAtRisk: int | None = None


class Mesh(BaseModel):
    id: str | None = None
    term: str | None = None


class FlowGroup(BaseModel):
    id: str | None = None
    title: str | None = None
    description: str | None = None


class Retraction(BaseModel):
    pmid: str | None = None
    source: str | None = None


class MeasureGroup(BaseModel):
    id: str | None = None
    title: str | None = None
    description: str | None = None


class BrowseBranch(BaseModel):
    abbrev: str | None = None
    name: str | None = None


class DenomCount(BaseModel):
    groupId: str | None = None
    value: str | None = None


class EventStats(BaseModel):
    groupId: str | None = None
    numEvents: int | None = None
    numAffected: int | None = None
    numAtRisk: int | None = None


class FlowStats(BaseModel):
    groupId: str | None = None
    comment: str | None = None
    numSubjects: str | None = None
    numUnits: str | None = None


class Measurement(BaseModel):
    groupId: str | None = None
    value: str | None = None
    spread: str | None = None
    lowerLimit: str | None = None
    upperLimit: str | None = None
    comment: str | None = None


class Status(Enum):
    ACTIVE_NOT_RECRUITING = 'ACTIVE_NOT_RECRUITING'
    COMPLETED = 'COMPLETED'
    ENROLLING_BY_INVITATION = 'ENROLLING_BY_INVITATION'
    NOT_YET_RECRUITING = 'NOT_YET_RECRUITING'
    RECRUITING = 'RECRUITING'
    SUSPENDED = 'SUSPENDED'
    TERMINATED = 'TERMINATED'
    WITHDRAWN = 'WITHDRAWN'
    AVAILABLE = 'AVAILABLE'
    NO_LONGER_AVAILABLE = 'NO_LONGER_AVAILABLE'
    TEMPORARILY_NOT_AVAILABLE = 'TEMPORARILY_NOT_AVAILABLE'
    APPROVED_FOR_MARKETING = 'APPROVED_FOR_MARKETING'
    WITHHELD = 'WITHHELD'
    UNKNOWN = 'UNKNOWN'


class StudyType(Enum):
    EXPANDED_ACCESS = 'EXPANDED_ACCESS'
    INTERVENTIONAL = 'INTERVENTIONAL'
    OBSERVATIONAL = 'OBSERVATIONAL'


class Phase(Enum):
    NA = 'NA'
    EARLY_PHASE1 = 'EARLY_PHASE1'
    PHASE1 = 'PHASE1'
    PHASE2 = 'PHASE2'
    PHASE3 = 'PHASE3'
    PHASE4 = 'PHASE4'


class Sex(Enum):
    FEMALE = 'FEMALE'
    MALE = 'MALE'
    ALL = 'ALL'


class StandardAge(Enum):
    CHILD = 'CHILD'
    ADULT = 'ADULT'
    OLDER_ADULT = 'OLDER_ADULT'


class SamplingMethod(Enum):
    PROBABILITY_SAMPLE = 'PROBABILITY_SAMPLE'
    NON_PROBABILITY_SAMPLE = 'NON_PROBABILITY_SAMPLE'


class IpdSharing(Enum):
    YES = 'YES'
    NO = 'NO'
    UNDECIDED = 'UNDECIDED'


class IpdSharingInfoType(Enum):
    STUDY_PROTOCOL = 'STUDY_PROTOCOL'
    SAP = 'SAP'
    ICF = 'ICF'
    CSR = 'CSR'
    ANALYTIC_CODE = 'ANALYTIC_CODE'


class OrgStudyIdType(Enum):
    NIH = 'NIH'
    FDA = 'FDA'
    VA = 'VA'
    CDC = 'CDC'
    AHRQ = 'AHRQ'
    SAMHSA = 'SAMHSA'


class SecondaryIdType(Enum):
    NIH = 'NIH'
    FDA = 'FDA'
    VA = 'VA'
    CDC = 'CDC'
    AHRQ = 'AHRQ'
    SAMHSA = 'SAMHSA'
    OTHER_GRANT = 'OTHER_GRANT'
    EUDRACT_NUMBER = 'EUDRACT_NUMBER'
    CTIS = 'CTIS'
    REGISTRY = 'REGISTRY'
    OTHER = 'OTHER'


class AgencyClass(Enum):
    NIH = 'NIH'
    FED = 'FED'
    OTHER_GOV = 'OTHER_GOV'
    INDIV = 'INDIV'
    INDUSTRY = 'INDUSTRY'
    NETWORK = 'NETWORK'
    AMBIG = 'AMBIG'
    OTHER = 'OTHER'
    UNKNOWN = 'UNKNOWN'


class ExpandedAccessStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    NO_LONGER_AVAILABLE = 'NO_LONGER_AVAILABLE'
    TEMPORARILY_NOT_AVAILABLE = 'TEMPORARILY_NOT_AVAILABLE'
    APPROVED_FOR_MARKETING = 'APPROVED_FOR_MARKETING'


class DateType(Enum):
    ACTUAL = 'ACTUAL'
    ESTIMATED = 'ESTIMATED'


class ResponsiblePartyType(Enum):
    SPONSOR = 'SPONSOR'
    PRINCIPAL_INVESTIGATOR = 'PRINCIPAL_INVESTIGATOR'
    SPONSOR_INVESTIGATOR = 'SPONSOR_INVESTIGATOR'


class DesignAllocation(Enum):
    RANDOMIZED = 'RANDOMIZED'
    NON_RANDOMIZED = 'NON_RANDOMIZED'
    NA = 'NA'


class InterventionalAssignment(Enum):
    SINGLE_GROUP = 'SINGLE_GROUP'
    PARALLEL = 'PARALLEL'
    CROSSOVER = 'CROSSOVER'
    FACTORIAL = 'FACTORIAL'
    SEQUENTIAL = 'SEQUENTIAL'


class PrimaryPurpose(Enum):
    TREATMENT = 'TREATMENT'
    PREVENTION = 'PREVENTION'
    DIAGNOSTIC = 'DIAGNOSTIC'
    ECT = 'ECT'
    SUPPORTIVE_CARE = 'SUPPORTIVE_CARE'
    SCREENING = 'SCREENING'
    HEALTH_SERVICES_RESEARCH = 'HEALTH_SERVICES_RESEARCH'
    BASIC_SCIENCE = 'BASIC_SCIENCE'
    DEVICE_FEASIBILITY = 'DEVICE_FEASIBILITY'
    OTHER = 'OTHER'


class ObservationalModel(Enum):
    COHORT = 'COHORT'
    CASE_CONTROL = 'CASE_CONTROL'
    CASE_ONLY = 'CASE_ONLY'
    CASE_CROSSOVER = 'CASE_CROSSOVER'
    ECOLOGIC_OR_COMMUNITY = 'ECOLOGIC_OR_COMMUNITY'
    FAMILY_BASED = 'FAMILY_BASED'
    DEFINED_POPULATION = 'DEFINED_POPULATION'
    NATURAL_HISTORY = 'NATURAL_HISTORY'
    OTHER = 'OTHER'


class DesignTimePerspective(Enum):
    RETROSPECTIVE = 'RETROSPECTIVE'
    PROSPECTIVE = 'PROSPECTIVE'
    CROSS_SECTIONAL = 'CROSS_SECTIONAL'
    OTHER = 'OTHER'


class BioSpecRetention(Enum):
    NONE_RETAINED = 'NONE_RETAINED'
    SAMPLES_WITH_DNA = 'SAMPLES_WITH_DNA'
    SAMPLES_WITHOUT_DNA = 'SAMPLES_WITHOUT_DNA'


class EnrollmentType(Enum):
    ACTUAL = 'ACTUAL'
    ESTIMATED = 'ESTIMATED'


class ArmGroupType(Enum):
    EXPERIMENTAL = 'EXPERIMENTAL'
    ACTIVE_COMPARATOR = 'ACTIVE_COMPARATOR'
    PLACEBO_COMPARATOR = 'PLACEBO_COMPARATOR'
    SHAM_COMPARATOR = 'SHAM_COMPARATOR'
    NO_INTERVENTION = 'NO_INTERVENTION'
    OTHER = 'OTHER'


class InterventionType(Enum):
    BEHAVIORAL = 'BEHAVIORAL'
    BIOLOGICAL = 'BIOLOGICAL'
    COMBINATION_PRODUCT = 'COMBINATION_PRODUCT'
    DEVICE = 'DEVICE'
    DIAGNOSTIC_TEST = 'DIAGNOSTIC_TEST'
    DIETARY_SUPPLEMENT = 'DIETARY_SUPPLEMENT'
    DRUG = 'DRUG'
    GENETIC = 'GENETIC'
    PROCEDURE = 'PROCEDURE'
    RADIATION = 'RADIATION'
    OTHER = 'OTHER'


class ContactRole(Enum):
    STUDY_CHAIR = 'STUDY_CHAIR'
    STUDY_DIRECTOR = 'STUDY_DIRECTOR'
    PRINCIPAL_INVESTIGATOR = 'PRINCIPAL_INVESTIGATOR'
    SUB_INVESTIGATOR = 'SUB_INVESTIGATOR'
    CONTACT = 'CONTACT'


class OfficialRole(Enum):
    STUDY_CHAIR = 'STUDY_CHAIR'
    STUDY_DIRECTOR = 'STUDY_DIRECTOR'
    PRINCIPAL_INVESTIGATOR = 'PRINCIPAL_INVESTIGATOR'
    SUB_INVESTIGATOR = 'SUB_INVESTIGATOR'


class RecruitmentStatus(Enum):
    ACTIVE_NOT_RECRUITING = 'ACTIVE_NOT_RECRUITING'
    COMPLETED = 'COMPLETED'
    ENROLLING_BY_INVITATION = 'ENROLLING_BY_INVITATION'
    NOT_YET_RECRUITING = 'NOT_YET_RECRUITING'
    RECRUITING = 'RECRUITING'
    SUSPENDED = 'SUSPENDED'
    TERMINATED = 'TERMINATED'
    WITHDRAWN = 'WITHDRAWN'
    AVAILABLE = 'AVAILABLE'


class ReferenceType(Enum):
    BACKGROUND = 'BACKGROUND'
    RESULT = 'RESULT'
    DERIVED = 'DERIVED'


class MeasureParam(Enum):
    GEOMETRIC_MEAN = 'GEOMETRIC_MEAN'
    GEOMETRIC_LEAST_SQUARES_MEAN = 'GEOMETRIC_LEAST_SQUARES_MEAN'
    LEAST_SQUARES_MEAN = 'LEAST_SQUARES_MEAN'
    LOG_MEAN = 'LOG_MEAN'
    MEAN = 'MEAN'
    MEDIAN = 'MEDIAN'
    NUMBER = 'NUMBER'
    COUNT_OF_PARTICIPANTS = 'COUNT_OF_PARTICIPANTS'
    COUNT_OF_UNITS = 'COUNT_OF_UNITS'


class MeasureDispersionType(Enum):
    NA = 'NA'
    STANDARD_DEVIATION = 'STANDARD_DEVIATION'
    STANDARD_ERROR = 'STANDARD_ERROR'
    INTER_QUARTILE_RANGE = 'INTER_QUARTILE_RANGE'
    FULL_RANGE = 'FULL_RANGE'
    CONFIDENCE_80 = 'CONFIDENCE_80'
    CONFIDENCE_90 = 'CONFIDENCE_90'
    CONFIDENCE_95 = 'CONFIDENCE_95'
    CONFIDENCE_975 = 'CONFIDENCE_975'
    CONFIDENCE_99 = 'CONFIDENCE_99'
    CONFIDENCE_OTHER = 'CONFIDENCE_OTHER'
    GEOMETRIC_COEFFICIENT = 'GEOMETRIC_COEFFICIENT'


class OutcomeMeasureType(Enum):
    PRIMARY = 'PRIMARY'
    SECONDARY = 'SECONDARY'
    OTHER_PRE_SPECIFIED = 'OTHER_PRE_SPECIFIED'
    POST_HOC = 'POST_HOC'


class ReportingStatus(Enum):
    NOT_POSTED = 'NOT_POSTED'
    POSTED = 'POSTED'


class EventAssessment(Enum):
    NON_SYSTEMATIC_ASSESSMENT = 'NON_SYSTEMATIC_ASSESSMENT'
    SYSTEMATIC_ASSESSMENT = 'SYSTEMATIC_ASSESSMENT'


class AgreementRestrictionType(Enum):
    LTE60 = 'LTE60'
    GT60 = 'GT60'
    OTHER = 'OTHER'


class BrowseLeafRelevance(Enum):
    LOW = 'LOW'
    HIGH = 'HIGH'


class DesignMasking(Enum):
    NONE = 'NONE'
    SINGLE = 'SINGLE'
    DOUBLE = 'DOUBLE'
    TRIPLE = 'TRIPLE'
    QUADRUPLE = 'QUADRUPLE'


class WhoMasked(Enum):
    PARTICIPANT = 'PARTICIPANT'
    CARE_PROVIDER = 'CARE_PROVIDER'
    INVESTIGATOR = 'INVESTIGATOR'
    OUTCOMES_ASSESSOR = 'OUTCOMES_ASSESSOR'


class AnalysisDispersionType(Enum):
    STANDARD_DEVIATION = 'STANDARD_DEVIATION'
    STANDARD_ERROR_OF_MEAN = 'STANDARD_ERROR_OF_MEAN'


class ConfidenceIntervalNumSides(Enum):
    ONE_SIDED = 'ONE_SIDED'
    TWO_SIDED = 'TWO_SIDED'


class NonInferiorityType(Enum):
    SUPERIORITY = 'SUPERIORITY'
    NON_INFERIORITY = 'NON_INFERIORITY'
    EQUIVALENCE = 'EQUIVALENCE'
    OTHER = 'OTHER'
    NON_INFERIORITY_OR_EQUIVALENCE = 'NON_INFERIORITY_OR_EQUIVALENCE'
    SUPERIORITY_OR_OTHER = 'SUPERIORITY_OR_OTHER'
    NON_INFERIORITY_OR_EQUIVALENCE_LEGACY = 'NON_INFERIORITY_OR_EQUIVALENCE_LEGACY'
    SUPERIORITY_OR_OTHER_LEGACY = 'SUPERIORITY_OR_OTHER_LEGACY'


class UnpostedEventType(Enum):
    RESET = 'RESET'
    RELEASE = 'RELEASE'
    UNRELEASE = 'UNRELEASE'


class ViolationEventType(Enum):
    VIOLATION_IDENTIFIED = 'VIOLATION_IDENTIFIED'
    CORRECTION_CONFIRMED = 'CORRECTION_CONFIRMED'
    PENALTY_IMPOSED = 'PENALTY_IMPOSED'
    ISSUES_IN_LETTER_ADDRESSED_CONFIRMED = 'ISSUES_IN_LETTER_ADDRESSED_CONFIRMED'


class GeoPoint(BaseModel):
    lat: float
    lon: float


class StudiesCsv(RootModel[str]):
    root: str
    """
    Study objects in csv file
    """


class StudiesZip(RootModel[str]):
    root: str
    """
    Study objects as files in zip archive
    """


class StudyFhir(BaseModel):
    """
    Study in FHIR JSON format
    """


class PartialDate(RootModel[str]):
    root: str
    """
    Date in `yyyy`, `yyyy-MM`, or `yyyy-MM-dd` format
    """


class DateTimeMinutes(RootModel[str]):
    root: str
    """
    Date and time in `yyyy-MM-dd'T'HH:mm` format
    """


class ErrorMessage(RootModel[str]):
    root: str
    """
    A text message describing an error
    """


class FieldNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    altPieceNames: list[str] | None = None
    children: list[FieldNode] | None = None
    dedLink: WebLink | None = None
    description: str | None = None
    historicOnly: bool | None = None
    indexedOnly: bool | None = None
    isEnum: bool | None = None
    maxChars: int | None = None
    name: str
    nested: bool | None = None
    piece: str
    rules: str | None = None
    sourceType: str
    synonyms: bool | None = None
    title: str | None = None
    type: str


class FieldNodeList(RootModel[list[FieldNode]]):
    root: list[FieldNode]


class SearchArea(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    param: str | None = None
    parts: list[SearchPart]
    uiLabel: str | None = None


class EnumInfo(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    pieces: list[str]
    type: str
    values: list[EnumItem]


class EnumInfoList(RootModel[list[EnumInfo]]):
    root: list[EnumInfo]


class GzipStats(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    averageSizeBytes: int
    largestStudies: list[StudySize]
    percentiles: dict[str, Any]
    ranges: list[DistItem]
    totalStudies: int


class ListSizes(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field: str
    maxSize: int | None = None
    minSize: int | None = None
    piece: str
    topSizes: list[ListSize] | None = None
    uniqueSizesCount: int


class ListSizesList(RootModel[list[ListSizes]]):
    root: list[ListSizes]


class EnumStats(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field: str
    missingStudiesCount: int
    piece: str
    topValues: list[ValueCount] | None = None
    type: FieldStatsType
    uniqueValuesCount: int


class StringStats(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field: str
    longest: LongestString | None = None
    missingStudiesCount: int
    piece: str
    topValues: list[ValueCount] | None = None
    type: FieldStatsType
    uniqueValuesCount: int


class OutcomesModule(BaseModel):
    primaryOutcomes: list[Outcome] | None = None
    secondaryOutcomes: list[Outcome] | None = None
    otherOutcomes: list[Outcome] | None = None


class EligibilityModule(BaseModel):
    eligibilityCriteria: str | None = None
    healthyVolunteers: bool | None = None
    sex: Sex | None = None
    genderBased: bool | None = None
    genderDescription: str | None = None
    minimumAge: Annotated[
        str | None,
        Field(
            pattern='^\\d+ (Year|Years|Month|Months|Week|Weeks|Day|Days|Hour|Hours|Minute|Minutes)$'
        ),
    ] = None
    maximumAge: Annotated[
        str | None,
        Field(
            pattern='^\\d+ (Year|Years|Month|Months|Week|Weeks|Day|Days|Hour|Hours|Minute|Minutes)$'
        ),
    ] = None
    stdAges: list[StandardAge] | None = None
    studyPopulation: str | None = None
    samplingMethod: SamplingMethod | None = None


class EnrollmentInfo(BaseModel):
    count: int | None = None
    type: EnrollmentType | None = None


class BioSpec(BaseModel):
    retention: BioSpecRetention | None = None
    description: str | None = None


class Intervention(BaseModel):
    type: InterventionType | None = None
    name: str | None = None
    description: str | None = None
    armGroupLabels: list[str] | None = None
    otherNames: list[str] | None = None


class SecondaryIdInfo(BaseModel):
    id: str | None = None
    type: SecondaryIdType | None = None
    domain: str | None = None
    link: str | None = None


class DateStruct(BaseModel):
    date: date_aliased | None = None
    type: DateType | None = None


class ExpandedAccessInfo(BaseModel):
    hasExpandedAccess: bool | None = None
    nctId: str | None = None
    statusForNctId: ExpandedAccessStatus | None = None


class ViolationEvent(BaseModel):
    type: ViolationEventType | None = None
    description: str | None = None
    creationDate: date_aliased | None = None
    issuedDate: date_aliased | None = None
    releaseDate: date_aliased | None = None
    postedDate: date_aliased | None = None


class ArmGroup(BaseModel):
    label: str | None = None
    type: ArmGroupType | None = None
    description: str | None = None
    interventionNames: list[str] | None = None


class Organization(BaseModel):
    fullName: str | None = None
    class_: Annotated[AgencyClass | None, Field(alias='class')] = None


class IpdSharingStatementModule(BaseModel):
    ipdSharing: IpdSharing | None = None
    description: str | None = None
    infoTypes: list[IpdSharingInfoType] | None = None
    timeFrame: str | None = None
    accessCriteria: str | None = None
    url: str | None = None


class OrgStudyIdInfo(BaseModel):
    id: str | None = None
    type: OrgStudyIdType | None = None
    link: str | None = None


class ResponsibleParty(BaseModel):
    type: ResponsiblePartyType | None = None
    investigatorFullName: str | None = None
    investigatorTitle: str | None = None
    investigatorAffiliation: str | None = None
    oldNameTitle: str | None = None
    oldOrganization: str | None = None


class CertainAgreement(BaseModel):
    piSponsorEmployee: bool | None = None
    restrictionType: AgreementRestrictionType | None = None
    restrictiveAgreement: bool | None = None
    otherDetails: str | None = None


class UnpostedEvent(BaseModel):
    type: UnpostedEventType | None = None
    date: date_aliased | None = None
    dateUnknown: bool | None = None


class Contact(BaseModel):
    name: str | None = None
    role: ContactRole | None = None
    phone: str | None = None
    phoneExt: str | None = None
    email: str | None = None


class PartialDateStruct(BaseModel):
    date: PartialDate | None = None
    type: DateType | None = None


class Reference(BaseModel):
    pmid: str | None = None
    type: ReferenceType | None = None
    citation: str | None = None
    retractions: list[Retraction] | None = None


class Location(BaseModel):
    facility: str | None = None
    status: RecruitmentStatus | None = None
    city: str | None = None
    state: str | None = None
    zip: str | None = None
    country: str | None = None
    contacts: list[Contact] | None = None
    countryCode: str | None = None
    geoPoint: GeoPoint | None = None


class Sponsor(BaseModel):
    name: str | None = None
    class_: Annotated[AgencyClass | None, Field(alias='class')] = None


class Official(BaseModel):
    name: str | None = None
    affiliation: str | None = None
    role: OfficialRole | None = None


class BrowseLeaf(BaseModel):
    id: str | None = None
    name: str | None = None
    asFound: str | None = None
    relevance: BrowseLeafRelevance | None = None


class MaskingBlock(BaseModel):
    masking: DesignMasking | None = None
    maskingDescription: str | None = None
    whoMasked: list[WhoMasked] | None = None


class MeasureAnalysis(BaseModel):
    paramType: str | None = None
    paramValue: str | None = None
    dispersionType: AnalysisDispersionType | None = None
    dispersionValue: str | None = None
    statisticalMethod: str | None = None
    statisticalComment: str | None = None
    pValue: str | None = None
    pValueComment: str | None = None
    ciNumSides: ConfidenceIntervalNumSides | None = None
    ciPctValue: str | None = None
    ciLowerLimit: str | None = None
    ciUpperLimit: str | None = None
    ciLowerLimitComment: str | None = None
    ciUpperLimitComment: str | None = None
    estimateComment: str | None = None
    testedNonInferiority: bool | None = None
    nonInferiorityType: NonInferiorityType | None = None
    nonInferiorityComment: str | None = None
    otherAnalysisDescription: str | None = None
    groupDescription: str | None = None
    groupIds: list[str] | None = None


class AdverseEvent(BaseModel):
    term: str | None = None
    organSystem: str | None = None
    sourceVocabulary: str | None = None
    assessmentType: EventAssessment | None = None
    notes: str | None = None
    stats: list[EventStats] | None = None


class Denom(BaseModel):
    units: str | None = None
    counts: list[DenomCount] | None = None


class LargeDoc(BaseModel):
    typeAbbrev: str | None = None
    hasProtocol: bool | None = None
    hasSap: bool | None = None
    hasIcf: bool | None = None
    label: str | None = None
    date: date_aliased | None = None
    uploadDate: DateTimeMinutes | None = None
    filename: str | None = None
    size: int | None = None


class DropWithdraw(BaseModel):
    type: str | None = None
    comment: str | None = None
    reasons: list[FlowStats] | None = None


class MeasureCategory(BaseModel):
    title: str | None = None
    measurements: list[Measurement] | None = None


class FlowMilestone(BaseModel):
    type: str | None = None
    comment: str | None = None
    achievements: list[FlowStats] | None = None


class FieldValuesStats(
    RootModel[
        EnumStats | StringStats | DateStats | IntegerStats | NumberStats | BooleanStats
    ]
):
    root: (
        EnumStats | StringStats | DateStats | IntegerStats | NumberStats | BooleanStats
    )


class SearchDocument(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    areas: list[SearchArea]
    name: str


class SearchDocumentList(RootModel[list[SearchDocument]]):
    root: list[SearchDocument]


class IdentificationModule(BaseModel):
    nctId: str | None = None
    nctIdAliases: list[str] | None = None
    orgStudyIdInfo: OrgStudyIdInfo | None = None
    secondaryIdInfos: list[SecondaryIdInfo] | None = None
    briefTitle: str | None = None
    officialTitle: str | None = None
    acronym: str | None = None
    organization: Organization | None = None


class StatusModule(BaseModel):
    statusVerifiedDate: PartialDate | None = None
    overallStatus: Status | None = None
    lastKnownStatus: Status | None = None
    delayedPosting: bool | None = None
    whyStopped: str | None = None
    expandedAccessInfo: ExpandedAccessInfo | None = None
    startDateStruct: PartialDateStruct | None = None
    primaryCompletionDateStruct: PartialDateStruct | None = None
    completionDateStruct: PartialDateStruct | None = None
    studyFirstSubmitDate: date_aliased | None = None
    studyFirstSubmitQcDate: date_aliased | None = None
    studyFirstPostDateStruct: DateStruct | None = None
    resultsWaived: bool | None = None
    resultsFirstSubmitDate: date_aliased | None = None
    resultsFirstSubmitQcDate: date_aliased | None = None
    resultsFirstPostDateStruct: DateStruct | None = None
    dispFirstSubmitDate: date_aliased | None = None
    dispFirstSubmitQcDate: date_aliased | None = None
    dispFirstPostDateStruct: DateStruct | None = None
    lastUpdateSubmitDate: date_aliased | None = None
    lastUpdatePostDateStruct: DateStruct | None = None


class SponsorCollaboratorsModule(BaseModel):
    responsibleParty: ResponsibleParty | None = None
    leadSponsor: Sponsor | None = None
    collaborators: list[Sponsor] | None = None


class ArmsInterventionsModule(BaseModel):
    armGroups: list[ArmGroup] | None = None
    interventions: list[Intervention] | None = None


class ContactsLocationsModule(BaseModel):
    centralContacts: list[Contact] | None = None
    overallOfficials: list[Official] | None = None
    locations: list[Location] | None = None


class ReferencesModule(BaseModel):
    references: list[Reference] | None = None
    seeAlsoLinks: list[SeeAlsoLink] | None = None
    availIpds: list[AvailIpd] | None = None


class MoreInfoModule(BaseModel):
    limitationsAndCaveats: LimitationsAndCaveats | None = None
    certainAgreement: CertainAgreement | None = None
    pointOfContact: PointOfContact | None = None


class UnpostedAnnotation(BaseModel):
    unpostedResponsibleParty: str | None = None
    unpostedEvents: list[UnpostedEvent] | None = None


class ViolationAnnotation(BaseModel):
    violationEvents: list[ViolationEvent] | None = None


class FirstMcpInfo(BaseModel):
    postDateStruct: DateStruct | None = None


class AdverseEventsModule(BaseModel):
    frequencyThreshold: str | None = None
    timeFrame: str | None = None
    description: str | None = None
    allCauseMortalityComment: str | None = None
    eventGroups: list[EventGroup] | None = None
    seriousEvents: list[AdverseEvent] | None = None
    otherEvents: list[AdverseEvent] | None = None


class DesignInfo(BaseModel):
    allocation: DesignAllocation | None = None
    interventionModel: InterventionalAssignment | None = None
    interventionModelDescription: str | None = None
    primaryPurpose: PrimaryPurpose | None = None
    observationalModel: ObservationalModel | None = None
    timePerspective: DesignTimePerspective | None = None
    maskingInfo: MaskingBlock | None = None


class LargeDocumentModule(BaseModel):
    noSap: bool | None = None
    largeDocs: list[LargeDoc] | None = None


class BrowseModule(BaseModel):
    meshes: list[Mesh] | None = None
    ancestors: list[Mesh] | None = None
    browseLeaves: list[BrowseLeaf] | None = None
    browseBranches: list[BrowseBranch] | None = None


class FlowPeriod(BaseModel):
    title: str | None = None
    milestones: list[FlowMilestone] | None = None
    dropWithdraws: list[DropWithdraw] | None = None


class MeasureClass(BaseModel):
    title: str | None = None
    denoms: list[Denom] | None = None
    categories: list[MeasureCategory] | None = None


class BaselineMeasure(BaseModel):
    title: str | None = None
    description: str | None = None
    populationDescription: str | None = None
    paramType: MeasureParam | None = None
    dispersionType: MeasureDispersionType | None = None
    unitOfMeasure: str | None = None
    calculatePct: bool | None = None
    denomUnitsSelected: str | None = None
    denoms: list[Denom] | None = None
    classes: list[MeasureClass] | None = None


class FieldValuesStatsList(RootModel[list[FieldValuesStats]]):
    root: list[FieldValuesStats]


class DocumentSection(BaseModel):
    largeDocumentModule: LargeDocumentModule | None = None


class DesignModule(BaseModel):
    studyType: StudyType | None = None
    nPtrsToThisExpAccNctId: float | None = None
    expandedAccessTypes: ExpandedAccessTypes | None = None
    patientRegistry: bool | None = None
    targetDuration: Annotated[
        str | None,
        Field(
            pattern='^\\d+ (Year|Years|Month|Months|Week|Weeks|Day|Days|Hour|Hours|Minute|Minutes)$'
        ),
    ] = None
    phases: list[Phase] | None = None
    designInfo: DesignInfo | None = None
    bioSpec: BioSpec | None = None
    enrollmentInfo: EnrollmentInfo | None = None


class AnnotationModule(BaseModel):
    unpostedAnnotation: UnpostedAnnotation | None = None
    violationAnnotation: ViolationAnnotation | None = None


class SubmissionTracking(BaseModel):
    estimatedResultsFirstSubmitDate: date_aliased | None = None
    firstMcpInfo: FirstMcpInfo | None = None
    submissionInfos: list[SubmissionInfo] | None = None


class OutcomeMeasure(BaseModel):
    type: OutcomeMeasureType | None = None
    title: str | None = None
    description: str | None = None
    populationDescription: str | None = None
    reportingStatus: ReportingStatus | None = None
    anticipatedPostingDate: PartialDate | None = None
    paramType: MeasureParam | None = None
    dispersionType: str | None = None
    unitOfMeasure: str | None = None
    calculatePct: bool | None = None
    timeFrame: str | None = None
    typeUnitsAnalyzed: str | None = None
    denomUnitsSelected: str | None = None
    groups: list[MeasureGroup] | None = None
    denoms: list[Denom] | None = None
    classes: list[MeasureClass] | None = None
    analyses: list[MeasureAnalysis] | None = None


class BaselineCharacteristicsModule(BaseModel):
    populationDescription: str | None = None
    typeUnitsAnalyzed: str | None = None
    groups: list[MeasureGroup] | None = None
    denoms: list[Denom] | None = None
    measures: list[BaselineMeasure] | None = None


class ParticipantFlowModule(BaseModel):
    preAssignmentDetails: str | None = None
    recruitmentDetails: str | None = None
    typeUnitsAnalyzed: str | None = None
    groups: list[FlowGroup] | None = None
    periods: list[FlowPeriod] | None = None


class ProtocolSection(BaseModel):
    identificationModule: IdentificationModule | None = None
    statusModule: StatusModule | None = None
    sponsorCollaboratorsModule: SponsorCollaboratorsModule | None = None
    oversightModule: OversightModule | None = None
    descriptionModule: DescriptionModule | None = None
    conditionsModule: ConditionsModule | None = None
    designModule: DesignModule | None = None
    armsInterventionsModule: ArmsInterventionsModule | None = None
    outcomesModule: OutcomesModule | None = None
    eligibilityModule: EligibilityModule | None = None
    contactsLocationsModule: ContactsLocationsModule | None = None
    referencesModule: ReferencesModule | None = None
    ipdSharingStatementModule: IpdSharingStatementModule | None = None


class AnnotationSection(BaseModel):
    annotationModule: AnnotationModule | None = None


class OutcomeMeasuresModule(BaseModel):
    outcomeMeasures: list[OutcomeMeasure] | None = None


class MiscInfoModule(BaseModel):
    versionHolder: date_aliased | None = None
    removedCountries: list[str] | None = None
    submissionTracking: SubmissionTracking | None = None


class ResultsSection(BaseModel):
    participantFlowModule: ParticipantFlowModule | None = None
    baselineCharacteristicsModule: BaselineCharacteristicsModule | None = None
    outcomeMeasuresModule: OutcomeMeasuresModule | None = None
    adverseEventsModule: AdverseEventsModule | None = None
    moreInfoModule: MoreInfoModule | None = None


class DerivedSection(BaseModel):
    miscInfoModule: MiscInfoModule | None = None
    conditionBrowseModule: BrowseModule | None = None
    interventionBrowseModule: BrowseModule | None = None


class Study(BaseModel):
    protocolSection: ProtocolSection | None = None
    resultsSection: ResultsSection | None = None
    annotationSection: AnnotationSection | None = None
    documentSection: DocumentSection | None = None
    derivedSection: DerivedSection | None = None
    hasResults: bool | None = None


class StudyList(RootModel[list[Study]]):
    """
    `study` field values of type `markup` are in markdown format.

    """

    root: Annotated[list[Study], Field(title='Array of studies')]
    """
    `study` field values of type `markup` are in markdown format.

    """


class PagedStudies(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
        alias_generator=to_camel,
        populate_by_name=True,
    )
    next_page_token: str | None = None
    studies: list[Study]
    total_count: int | None = None


FieldNode.model_rebuild()
